; Script generated by the Inno Setup Script Wizard and ChatGPT, with manual revisions.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Triggerless Triggerbot"
#define MyAppVersion "1.0.4.2510"
#define MyAppPublisher "triggerless.com"
#define MyAppURL "https://triggerless.com//triggerbot/"
#define MyAppExeName "TriggerBot.exe"
#define MyAppIcoName "note3d.ico"
#define ProjectPath "D:\DEV\CS\triggerless-triggerbot\Triggerless.TriggerBot"
#define ReleaseBin "D:\DEV\CS\triggerless-triggerbot\Triggerless.TriggerBot\bin\x64\Release"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{B698BC6A-2407-4B85-B87B-6F638BF423E7}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={userappdata}\Triggerless\Triggerbot
DisableDirPage=yes
DisableProgramGroupPage=yes
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
OutputBaseFilename=mysetup
Compression=lzma
SolidCompression=yes
WizardStyle=modern
SetupIconFile=D:\DEV\CS\triggerless-triggerbot\Triggerless.TriggerBot\assets\note10.ico


[Code]

// Send installation results to the server.
const
  ApiUrl = 'https://www.triggerless.com/api/bot/sendmessage';
  AppVer = '{#SetupSetting("AppVersion")}';   // compile-time inject of the version
  // Where IMVU keeps logs: %APPDATA%\IMVU
  ImvuSubDir = 'IMVU';
  FirstLog   = 'IMVULog.log';
  // Used for file read
  GENERIC_READ       = $80000000;
  FILE_SHARE_READ    = $00000001;
  FILE_SHARE_WRITE   = $00000002;
  FILE_SHARE_DELETE  = $00000004;
  OPEN_EXISTING         = 3;
  INVALID_HANDLE_VALUE  = -1;
  MAX_READ = 2147483647;

var
  InstallSucceeded: Boolean;

// ---------------------------------
// This is used to determine when and how to install the Liberation Sans font
// as a user-specfic system font.

function PerUserFontDir: string;
begin
  Result := ExpandConstant('{localappdata}\Microsoft\Windows\Fonts');
end;

function ShouldInstallFont(const FileName, FaceName: string): Boolean;
begin
  Result :=
    (not FontExists(FaceName)) and
    (not FileExists(PerUserFontDir + '\' + FileName));
end;

// This is the new code which attempts to slide the CustomerId out of the
// IMVU Log files. If we find it, we'll add it as an HTTP header when we
// send the request to report it on Discord. This will have to be passed
// down to the RecordEvent further in the chain, but at least we can capture
// that information right now.

function GetAppData: string;
begin
  Result := ExpandConstant('{userappdata}');
end;

// This gets where IMVU stores the Log files.

function ImvuFileLocation: string;
begin
  Result := AddBackslash(GetAppData) + ImvuSubDir;
end;

// ---------- File reading with shared read (like FileShare.ReadWrite) ----------

function CreateFileW(lpFileName: string; dwDesiredAccess, dwShareMode: Cardinal;
  lpSecurityAttributes: Integer; dwCreationDisposition, dwFlagsAndAttributes: Cardinal;
  hTemplateFile: Integer): Integer;
  external 'CreateFileW@kernel32.dll stdcall';

// --- declarations ---
function ReadFile(hFile: Integer; var Buffer: AnsiString;  // <-- changed here
  nNumberOfBytesToRead: Cardinal; var lpNumberOfBytesRead: Cardinal;
  lpOverlapped: Integer): Integer;
  external 'ReadFile@kernel32.dll stdcall';

function GetFileSize(hFile: Integer; var lpFileSizeHigh: Cardinal): Cardinal;
  external 'GetFileSize@kernel32.dll stdcall';

function CloseHandle(hObject: Integer): Integer;
  external 'CloseHandle@kernel32.dll stdcall';

// Shared-read file loader (similar to C# FileShare.ReadWrite | Delete)
function ReadAllTextUnlocked(const FileName: string): string;
var
  h: Integer;
  hi, lo: Cardinal;
  size64: Int64;
  toRead: Cardinal;
  read: Cardinal;
  bytes: AnsiString;
begin
  Result := '';
  if not FileExists(FileName) then Exit;

  h := CreateFileW(FileName, GENERIC_READ,
                   FILE_SHARE_READ or FILE_SHARE_WRITE or FILE_SHARE_DELETE,
                   0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
  if h = INVALID_HANDLE_VALUE then Exit;

  try
    hi := 0;
    lo := GetFileSize(h, hi);
    size64 := (Int64(hi) shl 32) or lo;
    if size64 <= 0 then Exit;

    if size64 > MAX_READ then
      toRead := MAX_READ
    else
      toRead := Cardinal(size64);  // safe cast now

    SetLength(bytes, Integer(toRead));  // SetLength expects Integer
    if (ReadFile(h, bytes, toRead, read, 0) = 0) or (read = 0) then Exit;

    SetLength(bytes, Integer(read));
    Result := String(bytes);
  finally
    CloseHandle(h);
  end;
end;
// ---------- Regex helpers (VBScript.RegExp) ----------

procedure CollectCids(const Text, Pattern: string; Cids: TStrings);
var
  Re, Matches, M: Variant;
  I: Integer;
  S: string;
begin
  // Uses built-in COM regex (supports () groups, not named groups), this is circa 1990's shit LOL
  Re := CreateOleObject('VBScript.RegExp');
  Re.Pattern    := Pattern;
  Re.IgnoreCase := True;
  Re.Global     := True;

  Matches := Re.Execute(Text);
  for I := 0 to Matches.Count - 1 do
  begin
    M := Matches.Item[I];
    // first capturing group = SubMatches.Item(0)
    if M.SubMatches.Count > 0 then
    begin
      S := M.SubMatches.Item(0);
      if S <> '' then
        Cids.Add(S);
    end;
  end;
end;

// Find the index of "Key=" line; returns -1 if not found
function SLFindName(SL: TStringList; const Key: string): Integer;
var
  i, p: Integer;
  s: string;
begin
  Result := -1;
  for i := 0 to SL.Count - 1 do
  begin
    s := SL[i];
    p := Pos('=', s);
    if (p > 0) and (Copy(s, 1, p - 1) = Key) then
    begin
      Result := i;
      Exit;
    end;
  end;
end;

// Get value for key; '' if not present
function SLGetValue(SL: TStringList; const Key: string): string;
var
  idx, p: Integer;
  s: string;
begin
  idx := SLFindName(SL, Key);
  if idx >= 0 then
  begin
    s := SL[idx];
    p := Pos('=', s);
    if p > 0 then
      Result := Copy(s, p + 1, Length(s) - p)
    else
      Result := '';
  end
  else
    Result := '';
end;

// Set or add key=value
procedure SLSetValue(SL: TStringList; const Key, Value: string);
var
  idx: Integer;
begin
  idx := SLFindName(SL, Key);
  if idx >= 0 then
    SL[idx] := Key + '=' + Value
  else
    SL.Add(Key + '=' + Value);
end;

// Extract both parts from "key=value" at index
procedure SLGetPairAt(SL: TStringList; Index: Integer; var Key, Value: string);
var
  s: string;
  p: Integer;
begin
  Key := '';
  Value := '';
  if (Index < 0) or (Index >= SL.Count) then Exit;

  s := SL[Index];
  p := Pos('=', s);
  if p > 0 then
  begin
    Key := Copy(s, 1, p - 1);
    Value := Copy(s, p + 1, Length(s) - p);
  end
  else
    Key := s; // no '=', treat whole line as key
end;


// Returns the most frequently occurring string in `Items`.
// Tie-breaker: earliest first occurrence wins.
function MostPrevalent(const Items: TStrings): string;
var
  Counts, FirstIdx: TStringList;
  i, Cnt, BestCount, BestFirst: Integer;
  Key, FirstStr, PairKey, PairVal: string;
begin
  Result := '';
  if Items.Count = 0 then Exit;

  Counts   := TStringList.Create;
  FirstIdx := TStringList.Create;
  try
    // We'll store "key=value" strings (value is an integer as text)
    // Sorted/dupIgnore are optional here, but harmless:
    Counts.Sorted := True;
    Counts.Duplicates := dupIgnore;

    FirstIdx.Sorted := True;
    FirstIdx.Duplicates := dupIgnore;

    // Count and remember first index seen
    for i := 0 to Items.Count - 1 do
    begin
      Key := Items[i];
      Cnt := StrToIntDef(SLGetValue(Counts, Key), 0);
      if Cnt = 0 then
      begin
        SLSetValue(Counts, Key, '1');
        SLSetValue(FirstIdx, Key, IntToStr(i));
      end
      else
        SLSetValue(Counts, Key, IntToStr(Cnt + 1));
    end;

    // Pick the most frequent; tie-breaker = earliest first occurrence
    BestCount := 0;
    BestFirst := MaxInt;

    for i := 0 to Counts.Count - 1 do
    begin
      SLGetPairAt(Counts, i, PairKey, PairVal);
      if PairKey = '' then Continue;

      Cnt := StrToIntDef(PairVal, 0);
      FirstStr := SLGetValue(FirstIdx, PairKey);
      if FirstStr = '' then Continue;

      // earliest first occurrence wins ties
      if (Cnt > BestCount) or ((Cnt = BestCount) and (StrToIntDef(FirstStr, MaxInt) < BestFirst)) then
      begin
        BestCount := Cnt;
        BestFirst := StrToIntDef(FirstStr, MaxInt);
        Result := PairKey;
      end;
    end;
  finally
    FirstIdx.Free;
    Counts.Free;
  end;
end;

// ---------- Main: get the Avatar (Customer) ID from the rolling IMVU logs ----------

function GetAvatarId: Int64;
var
  LogNum: Integer;
  LogPath: string;
  Text: string;
  Patterns: array[0..4] of string;
  i: Integer;
  Cids: TStringList;
  Most: string;
begin
  Result := 0;

  // Patterns with a single capturing group for CID
  Patterns[0] := 'https://api\.imvu\.com/users/(\d+)/inventory_lists';
  Patterns[1] := 'https://api\.imvu\.com/inventory_lists/(\d+)-\d+';
  Patterns[2] := '\bcid=(\d+)\b';
  Patterns[3] := 'Request with userId,key,auth = \((\d+),';
  Patterns[4] := 'INFO: --> test\.getBuddyState\((\d+),';

  Cids := TStringList.Create;
  try
    LogNum := 0;
    while Result = 0 do
    begin
      if LogNum = 0 then
        LogPath := AddBackslash(ImvuFileLocation) + FirstLog
      else
        LogPath := AddBackslash(ImvuFileLocation) + FirstLog + '.' + IntToStr(LogNum);

      if not FileExists(LogPath) then
      begin
        // If you know the last rollover index (e.g., 5), break after it
        if LogNum > 5 then Break;
        LogNum := LogNum + 1;
        Continue;
      end;

      Text := ReadAllTextUnlocked(LogPath);
      if Text <> '' then
      begin
        for i := 0 to GetArrayLength(Patterns) - 1 do
        begin
          Cids.Clear;
          CollectCids(Text, Patterns[i], Cids);
          if Cids.Count = 0 then
            Continue;

          Most := MostPrevalent(Cids);
          if (Most <> '') and (StrToInt64Def(Most, 0) > 0) then
          begin
            Result := StrToInt64Def(Most, 0);
            Break;
          end;
        end;
      end;

      if Result > 0 then Break;
      LogNum := LogNum + 1;
    end;
  finally
    Cids.Free;
  end;
end;


// =======================================================================================
// This is the boiler plate Pascal you get with every new ISS project.

function IsAppInstalled(): Boolean;
var
  UninstallKey: string;
begin
  // Specify the uninstallation registry key for your application
  UninstallKey := 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{B698BC6A-2407-4B85-B87B-6F638BF423E7}';

  // Check if the uninstallation registry key exists
  Result := RegKeyExists(HKCU, UninstallKey);
end;

function GetUninstallerPath(): string;
var
  UninstallKey: string;
begin
  // Specify the uninstallation registry key for your application
  UninstallKey := 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{B698BC6A-2407-4B85-B87B-6F638BF423E7}';

  // Read the UninstallString value from the uninstallation registry key
  Result := '';

  if RegQueryStringValue(HKCU, UninstallKey, 'UninstallString', Result) then
  begin
    // Remove any quotes surrounding the uninstaller path
    Result := RemoveQuotes(Result);
  end;
end;

function InitializeSetup(): Boolean;
var
  UninstallExePath: string;
  ResultCode: Integer;
begin
  // Check if the application is already installed
  if IsAppInstalled() then
  begin
    // Get the path to the uninstaller for the currently installed version
    UninstallExePath := GetUninstallerPath();

    // Execute the uninstaller if the path is valid
    if UninstallExePath <> '' then
    begin
      // Execute the uninstaller and wait for it to finish
      Exec('"' + UninstallExePath + '"', '/SILENT', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);

      // Check if the uninstallation was successful
      if ResultCode = 0 then
      begin
        // Uninstallation succeeded, continue with the installation
        Result := True;
      end
      else
      begin
        // Uninstallation failed, abort the installation
        MsgBox('Unable to uninstall the previous version. Please manually uninstall the application before proceeding.', mbError, MB_OK);
        Result := False;
      end;
    end
    else
    begin
      // Invalid uninstaller path, abort the installation
      MsgBox('Unable to find the uninstaller for the previous version. Please manually uninstall the application before proceeding.', mbError, MB_OK);
      Result := False;
    end;
  end
  else
  begin
    Result := True; // Continue with the installation
  end;
end;

// Added the following to track installations 2025-09-26

function PostJson(const Url, Json: string): Boolean;
var
  Http: Variant;
begin
  Result := False;
  try
    Http := CreateOleObject('WinHttp.WinHttpRequest.5.1');
    // synchronous POST
    Http.Open('POST', Url, False);
    Http.SetRequestHeader('Content-Type', 'application/json');
    // Optional: identify the installer (good for server logs)
    Http.SetRequestHeader('User-Agent', 'InnoSetup/Triggerbot');
	// Customer tracking header
    Http.setRequestHeader('CustomerID', IntToStr(GetAvatarId()));
    Http.Send(Json);

    if (Http.Status >= 200) and (Http.Status < 300) then
    begin
      Log(Format('POST ok: %d %s', [Http.Status, Http.StatusText]));
      Result := True;
    end
    else
    begin
      Log(Format('POST failed: %d %s %s', [Http.Status, Http.StatusText, Http.ResponseText]));
    end;
  except
    Log('POST exception: ' + GetExceptionMessage);
  end;
end;

procedure InitializeWizard;
begin
  InstallSucceeded := False;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  // If we reach ssDone, setup completed successfully
  if CurStep = ssDone then
    InstallSucceeded := True;
end;

procedure DeinitializeSetup;
var
  title, body, json: string;
begin
  // Fires when the wizard closes in all cases (success, cancel, error)
  title := 'Triggerbot Installation';
  if InstallSucceeded then
    body := Format('Version %s installation successful', [AppVer])
  else
    body := Format('Version %s installation failed', [AppVer]);

  // Minimal JSON building (no special chars in these strings)
  json := Format('{"title":"%s","body":"%s"}', [title, body]);

  // Best-effort POST; errors are logged but do not block the installer
  if not PostJson(ApiUrl, json) then
    Log('Notification POST did not succeed.');
end;



[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";

[Files]
Source: "{#ProjectPath}\assets\note3d.ico"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ProjectPath}\assets\LiberationSans_Regular.ttf"; DestDir: "{localappdata}\Microsoft\Windows\Fonts"; FontInstall: "Liberation Sans"; Flags: onlyifdoesntexist uninsneveruninstall; Check: ShouldInstallFont('LiberationSans_Regular.ttf', 'Liberation Sans')
Source: "{#ProjectPath}\assets\LiberationSans_Bold.ttf"; DestDir: "{localappdata}\Microsoft\Windows\Fonts"; FontInstall: "Liberation Sans Bold"; Flags: onlyifdoesntexist uninsneveruninstall; Check: ShouldInstallFont('LiberationSans_Bold.ttf', 'Liberation Sans Bold')
Source: "{#ProjectPath}\assets\LiberationSans_Italic.ttf"; DestDir: "{localappdata}\Microsoft\Windows\Fonts"; FontInstall: "Liberation Sans Italic"; Flags: onlyifdoesntexist uninsneveruninstall; Check: ShouldInstallFont('LiberationSans_Italic.ttf', 'Liberation Sans Italic')
Source: "{#ProjectPath}\assets\LiberationSans_BoldItalic.ttf"; DestDir: "{localappdata}\Microsoft\Windows\Fonts"; FontInstall: "Liberation Sans Bold Italic"; Flags: onlyifdoesntexist uninsneveruninstall; Check: ShouldInstallFont('LiberationSans_BoldItalic.ttf', 'Liberation Sans Bold Italic')
Source: "{#ReleaseBin}\ffmpeg\ffmpeg.exe"; DestDir: "{app}\ffmpeg"; Flags: ignoreversion
Source: "{#ReleaseBin}\ffmpeg\ffprobe.exe"; DestDir: "{app}\ffmpeg"; Flags: ignoreversion

Source: "{#ReleaseBin}\x64\SQLite.Interop.dll"; DestDir: "{app}\x64"; Flags: ignoreversion
Source: "{#ReleaseBin}\x86\SQLite.Interop.dll"; DestDir: "{app}\x86"; Flags: ignoreversion
Source: "{#ReleaseBin}\Dapper.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\EntityFramework.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\EntityFramework.SqlServer.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\ICSharpCode.SharpZipLib.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\ManagedWinapi.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\ManagedWinapiNativeHelper.dll"; DestDir: "{app}"; Flags: ignoreversion 
Source: "{#ReleaseBin}\Microsoft.Bcl.AsyncInterfaces.dll"; DestDir: "{app}"; Flags: ignoreversion 
Source: "{#ReleaseBin}\Microsoft.Extensions.DependencyInjection.Abstractions.dll"; DestDir: "{app}"; Flags: ignoreversion 
Source: "{#ReleaseBin}\Microsoft.Extensions.DependencyInjection.dll"; DestDir: "{app}"; Flags: ignoreversion 
Source: "{#ReleaseBin}\Microsoft.Extensions.Logging.Abstractions.dll"; DestDir: "{app}"; Flags: ignoreversion 
Source: "{#ReleaseBin}\Microsoft.Win32.Registry.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\Microsoft.WindowsAPICodePack.Core.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\Microsoft.WindowsAPICodePack.Shell.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NAudio.Asio.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NAudio.Core.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NAudio.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NAudio.Midi.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NAudio.Vorbis.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NAudio.Wasapi.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NAudio.WaveFormRenderer.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NAudio.WinForms.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NAudio.WinMM.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\Newtonsoft.Json.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\NVorbis.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Buffers.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Collections.Immutable.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Data.SQLite.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Diagnostics.DiagnosticSource.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Drawing.Common.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Memory.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Numerics.Vectors.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Runtime.CompilerServices.Unsafe.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Security.AccessControl.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Security.Principal.Windows.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Threading.Channels.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\System.Threading.Tasks.Extensions.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\Triggerless.XAFLib.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\WindowsInput.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseBin}\TriggerBot.exe.config"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{userdesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\{#MyAppIcoName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

